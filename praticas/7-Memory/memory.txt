ex 1.1)
2^23 = 8M bytes 
4M half-words, 2M words, 1M double-words

000000 a 7FFFFF

quartos:
000000 - 1FFFFF
200000 - 3FFFFF
400000 - 5FFFFF
600000 - 7FFFFF

ex 1.2)
exemplos de addresses:
bytes: 600001, 600002, 7ABCDE (qualquer um dá)
half-words: 7AAAA0, 612346, 755788 (tem de ser par)
words: 756CCC, 600004, 777448 (multiplo de 4, terminar em 0,4,8,C)
double-words: 742BC8, 6AAA00, 628818 (multiplo de 8, terminar em 0 ou 8)

ex 1.3)
14902 - 3A36 	- não pode ser word [nem double-word(porque nao termian em 0 ou 8)]
3710 - E7E   	- [não pode ser word(nao termina em 0,4,8,C)] nem double-word
5555 - 15B3  	- não pode ser word [nem half-word(porque é impar)] nem double-word
764 - 764 / 16		47 / 16	- 2FC	- não pode ser double-word
      124   47		15   2
       12  		Fhex 2hex
	Chex   
2760 - 2760 / 16	172 / 16 - AC8 	- pode ser todos
       1160   172	012   10
	040		Chex  Ahex		
	 08
	  8hex

ex 1.4)
11899675     / 16	743729 / 16		46483 / 16	2905 / 16	181 / 16
 0699675      743729	103729	 46483		14483	2905	1305   181	021   11
  059675		 07729			 0083		 025		 05
   11675		  1329			   03		  09
    0475		   049
     155		    01
      11
      Bhex

B5931B, não pois está fora do espaço de endereçamento cujo máximo é 7FFFFF

ex 2.1)
128Mbit SDRAM w/ 8banks of 4096 linhas x 1024 colunas de 4 bits
128Mbit = 2^3 (Banks) * 2^12 (rows) * 2^10 (columns) * 2^2 = 2^27

B2-B0 + A11-A0 = 15 linhas de endereço

ex 2.2) 
preciso de 16 chips pois cada tem 4 bits (16*4 = 64-bit)

ex 2.3)
a storage vai passar a ser 64 em vez dos 4 acima, então:
2^3 + 2^12 + 2^10 = 32M doublewords (doubleword = 64bits)
doublewords são 64bits, bytes são 8bits, logo
32M * 8 = 256M bytes

ex 2.4)
       |=> chip15 => D63-D60 ------|
       |		   	   |
       |=> chip14 => D59-D56	   |
       |     .			   |
A11-A0-|     .			    } D63 - D0
       |     .			   |
       |=> chip01 => D7-D4	   |
       |			   |
       |=> chip00 => D3-D0 --------|